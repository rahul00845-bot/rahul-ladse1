import string
import random
import sys

def generate_password(length, use_uppercase=True, use_lowercase=True, use_digits=True, use_special=True):
    # Character sets
    chars = {
        'uppercase': string.ascii_uppercase,
        'lowercase': string.ascii_lowercase,
        'digits': string.digits,
        'special': string.punctuation
    }
    
    # Setup pool of characters based on user preferences
    pool = []
    if use_uppercase:
        pool.extend(list(chars['uppercase']))
    if use_lowercase:
        pool.extend(list(chars['lowercase']))
    if use_digits:
        pool.extend(list(chars['digits']))
    if use_special:
        pool.extend(list(chars['special']))
    
    # Validate at least one character type is selected
    if not pool:
        raise ValueError("At least one character type must be selected")
    
    # Generate password
    password = []
    for _ in range(length):
        password.append(random.choice(pool))
    
    # Final shuffle and convert to string
    random.shuffle(password)
    return ''.join(password)

def get_user_preferences():
    try:
        # Get password length
        length = int(input("Enter password length: "))
        if length < 1:
            print("Password length must be at least 1")
            sys.exit(1)
        
        # Get character type preferences
        use_uppercase = input("Include uppercase letters? (y/n): ").lower() == 'y'
        use_lowercase = input("Include lowercase letters? (y/n): ").lower() == 'y'
        use_digits = input("Include digits? (y/n): ").lower() == 'y'
        use_special = input("Include special characters? (y/n): ").lower() == 'y'
        
        # Validate at least one type selected
        if not (use_uppercase or use_lowercase or use_digits or use_special):
            print("You must select at least one character type")
            sys.exit(1)
            
        return length, use_uppercase, use_lowercase, use_digits, use_special
        
    except ValueError:
        print("Please enter a valid number for password length")   
if __name__ == "__main__":
    try:
        length, upper, lower, digits, special = get_user_preferences()
        password = generate_password(length, upper, lower, digits, special)
        print(f"\nGenerated Password: {password}")
    except Exception as e:
        print(f"\nError: {e}")
